        -:    0:Source:/nix/store/7rfaw11na5ajdgwr55ffzwfibbrdpk8z-glibc-2.33-56-dev/include/bits/unistd.h
        -:    0:Graph:thread.gcno
        -:    0:Data:thread.gcda
        -:    0:Runs:396
        -:    1:/* Checking macros for unistd functions.
        -:    2:   Copyright (C) 2005-2021 Free Software Foundation, Inc.
        -:    3:   This file is part of the GNU C Library.
        -:    4:
        -:    5:   The GNU C Library is free software; you can redistribute it and/or
        -:    6:   modify it under the terms of the GNU Lesser General Public
        -:    7:   License as published by the Free Software Foundation; either
        -:    8:   version 2.1 of the License, or (at your option) any later version.
        -:    9:
        -:   10:   The GNU C Library is distributed in the hope that it will be useful,
        -:   11:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:   13:   Lesser General Public License for more details.
        -:   14:
        -:   15:   You should have received a copy of the GNU Lesser General Public
        -:   16:   License along with the GNU C Library; if not, see
        -:   17:   <https://www.gnu.org/licenses/>.  */
        -:   18:
        -:   19:#ifndef _UNISTD_H
        -:   20:# error "Never include <bits/unistd.h> directly; use <unistd.h> instead."
        -:   21:#endif
        -:   22:
        -:   23:extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
        -:   24:			   size_t __buflen)
        -:   25:  __wur __attr_access ((__write_only__, 2, 3));
        -:   26:extern ssize_t __REDIRECT (__read_alias, (int __fd, void *__buf,
        -:   27:					  size_t __nbytes), read)
        -:   28:  __wur __attr_access ((__write_only__, 2, 3));
        -:   29:extern ssize_t __REDIRECT (__read_chk_warn,
        -:   30:			   (int __fd, void *__buf, size_t __nbytes,
        -:   31:			    size_t __buflen), __read_chk)
        -:   32:     __wur __warnattr ("read called with bigger length than size of "
        -:   33:		       "the destination buffer");
        -:   34:
        -:   35:__fortify_function __wur ssize_t
        -:   36:read (int __fd, void *__buf, size_t __nbytes)
        -:   37:{
     2072:   38:  if (__glibc_objsize0 (__buf) != (size_t) -1)
        -:   39:    {
     2072:   40:      if (!__builtin_constant_p (__nbytes))
        -:   41:	return __read_chk (__fd, __buf, __nbytes, __glibc_objsize0 (__buf));
        -:   42:
     2072:   43:      if (__nbytes > __glibc_objsize0 (__buf))
        -:   44:	return __read_chk_warn (__fd, __buf, __nbytes,
        -:   45:				__glibc_objsize0 (__buf));
        -:   46:    }
     2072:   47:  return __read_alias (__fd, __buf, __nbytes);
        -:   48:}
        -:   49:
        -:   50:#ifdef __USE_UNIX98
        -:   51:extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
        -:   52:			    __off_t __offset, size_t __bufsize)
        -:   53:  __wur __attr_access ((__write_only__, 2, 3));
        -:   54:extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
        -:   55:			      __off64_t __offset, size_t __bufsize)
        -:   56:  __wur __attr_access ((__write_only__, 2, 3));
        -:   57:extern ssize_t __REDIRECT (__pread_alias,
        -:   58:			   (int __fd, void *__buf, size_t __nbytes,
        -:   59:			    __off_t __offset), pread)
        -:   60:  __wur __attr_access ((__write_only__, 2, 3));
        -:   61:extern ssize_t __REDIRECT (__pread64_alias,
        -:   62:			   (int __fd, void *__buf, size_t __nbytes,
        -:   63:			    __off64_t __offset), pread64)
        -:   64:  __wur __attr_access ((__write_only__, 2, 3));
        -:   65:extern ssize_t __REDIRECT (__pread_chk_warn,
        -:   66:			   (int __fd, void *__buf, size_t __nbytes,
        -:   67:			    __off_t __offset, size_t __bufsize), __pread_chk)
        -:   68:     __wur __warnattr ("pread called with bigger length than size of "
        -:   69:		       "the destination buffer");
        -:   70:extern ssize_t __REDIRECT (__pread64_chk_warn,
        -:   71:			   (int __fd, void *__buf, size_t __nbytes,
        -:   72:			    __off64_t __offset, size_t __bufsize),
        -:   73:			    __pread64_chk)
        -:   74:     __wur __warnattr ("pread64 called with bigger length than size of "
        -:   75:		       "the destination buffer");
        -:   76:
        -:   77:# ifndef __USE_FILE_OFFSET64
        -:   78:__fortify_function __wur ssize_t
        -:   79:pread (int __fd, void *__buf, size_t __nbytes, __off_t __offset)
        -:   80:{
        -:   81:  if (__glibc_objsize0 (__buf) != (size_t) -1)
        -:   82:    {
        -:   83:      if (!__builtin_constant_p (__nbytes))
        -:   84:	return __pread_chk (__fd, __buf, __nbytes, __offset,
        -:   85:			    __glibc_objsize0 (__buf));
        -:   86:
        -:   87:      if ( __nbytes > __glibc_objsize0 (__buf))
        -:   88:	return __pread_chk_warn (__fd, __buf, __nbytes, __offset,
        -:   89:				 __glibc_objsize0 (__buf));
        -:   90:    }
        -:   91:  return __pread_alias (__fd, __buf, __nbytes, __offset);
        -:   92:}
        -:   93:# else
        -:   94:__fortify_function __wur ssize_t
        -:   95:pread (int __fd, void *__buf, size_t __nbytes, __off64_t __offset)
        -:   96:{
        -:   97:  if (__glibc_objsize0 (__buf) != (size_t) -1)
        -:   98:    {
        -:   99:      if (!__builtin_constant_p (__nbytes))
        -:  100:	return __pread64_chk (__fd, __buf, __nbytes, __offset,
        -:  101:			      __glibc_objsize0 (__buf));
        -:  102:
        -:  103:      if ( __nbytes > __glibc_objsize0 (__buf))
        -:  104:	return __pread64_chk_warn (__fd, __buf, __nbytes, __offset,
        -:  105:				   __glibc_objsize0 (__buf));
        -:  106:    }
        -:  107:
        -:  108:  return __pread64_alias (__fd, __buf, __nbytes, __offset);
        -:  109:}
        -:  110:# endif
        -:  111:
        -:  112:# ifdef __USE_LARGEFILE64
        -:  113:__fortify_function __wur ssize_t
        -:  114:pread64 (int __fd, void *__buf, size_t __nbytes, __off64_t __offset)
        -:  115:{
        -:  116:  if (__glibc_objsize0 (__buf) != (size_t) -1)
        -:  117:    {
        -:  118:      if (!__builtin_constant_p (__nbytes))
        -:  119:	return __pread64_chk (__fd, __buf, __nbytes, __offset,
        -:  120:			      __glibc_objsize0 (__buf));
        -:  121:
        -:  122:      if ( __nbytes > __glibc_objsize0 (__buf))
        -:  123:	return __pread64_chk_warn (__fd, __buf, __nbytes, __offset,
        -:  124:				   __glibc_objsize0 (__buf));
        -:  125:    }
        -:  126:
        -:  127:  return __pread64_alias (__fd, __buf, __nbytes, __offset);
        -:  128:}
        -:  129:# endif
        -:  130:#endif
        -:  131:
        -:  132:#if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K
        -:  133:extern ssize_t __readlink_chk (const char *__restrict __path,
        -:  134:			       char *__restrict __buf, size_t __len,
        -:  135:			       size_t __buflen)
        -:  136:     __THROW __nonnull ((1, 2)) __wur __attr_access ((__write_only__, 2, 3));
        -:  137:extern ssize_t __REDIRECT_NTH (__readlink_alias,
        -:  138:			       (const char *__restrict __path,
        -:  139:				char *__restrict __buf, size_t __len), readlink)
        -:  140:     __nonnull ((1, 2)) __wur __attr_access ((__write_only__, 2, 3));
        -:  141:extern ssize_t __REDIRECT_NTH (__readlink_chk_warn,
        -:  142:			       (const char *__restrict __path,
        -:  143:				char *__restrict __buf, size_t __len,
        -:  144:				size_t __buflen), __readlink_chk)
        -:  145:     __nonnull ((1, 2)) __wur __warnattr ("readlink called with bigger length "
        -:  146:					  "than size of destination buffer");
        -:  147:
        -:  148:__fortify_function __nonnull ((1, 2)) __wur ssize_t
        -:  149:__NTH (readlink (const char *__restrict __path, char *__restrict __buf,
        -:  150:		 size_t __len))
        -:  151:{
        -:  152:  if (__glibc_objsize (__buf) != (size_t) -1)
        -:  153:    {
        -:  154:      if (!__builtin_constant_p (__len))
        -:  155:	return __readlink_chk (__path, __buf, __len, __glibc_objsize (__buf));
        -:  156:
        -:  157:      if ( __len > __glibc_objsize (__buf))
        -:  158:	return __readlink_chk_warn (__path, __buf, __len,
        -:  159:				    __glibc_objsize (__buf));
        -:  160:    }
        -:  161:  return __readlink_alias (__path, __buf, __len);
        -:  162:}
        -:  163:#endif
        -:  164:
        -:  165:#ifdef __USE_ATFILE
        -:  166:extern ssize_t __readlinkat_chk (int __fd, const char *__restrict __path,
        -:  167:				 char *__restrict __buf, size_t __len,
        -:  168:				 size_t __buflen)
        -:  169:     __THROW __nonnull ((2, 3)) __wur __attr_access ((__write_only__, 3, 4));
        -:  170:extern ssize_t __REDIRECT_NTH (__readlinkat_alias,
        -:  171:			       (int __fd, const char *__restrict __path,
        -:  172:				char *__restrict __buf, size_t __len),
        -:  173:			       readlinkat)
        -:  174:     __nonnull ((2, 3)) __wur __attr_access ((__write_only__, 3, 4));
        -:  175:extern ssize_t __REDIRECT_NTH (__readlinkat_chk_warn,
        -:  176:			       (int __fd, const char *__restrict __path,
        -:  177:				char *__restrict __buf, size_t __len,
        -:  178:				size_t __buflen), __readlinkat_chk)
        -:  179:     __nonnull ((2, 3)) __wur __warnattr ("readlinkat called with bigger "
        -:  180:					  "length than size of destination "
        -:  181:					  "buffer");
        -:  182:
        -:  183:__fortify_function __nonnull ((2, 3)) __wur ssize_t
        -:  184:__NTH (readlinkat (int __fd, const char *__restrict __path,
        -:  185:		   char *__restrict __buf, size_t __len))
        -:  186:{
        -:  187:  if (__glibc_objsize (__buf) != (size_t) -1)
        -:  188:    {
        -:  189:      if (!__builtin_constant_p (__len))
        -:  190:	return __readlinkat_chk (__fd, __path, __buf, __len,
        -:  191:				 __glibc_objsize (__buf));
        -:  192:
        -:  193:      if (__len > __glibc_objsize (__buf))
        -:  194:	return __readlinkat_chk_warn (__fd, __path, __buf, __len,
        -:  195:				      __glibc_objsize (__buf));
        -:  196:    }
        -:  197:  return __readlinkat_alias (__fd, __path, __buf, __len);
        -:  198:}
        -:  199:#endif
        -:  200:
        -:  201:extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
        -:  202:     __THROW __wur;
        -:  203:extern char *__REDIRECT_NTH (__getcwd_alias,
        -:  204:			     (char *__buf, size_t __size), getcwd) __wur;
        -:  205:extern char *__REDIRECT_NTH (__getcwd_chk_warn,
        -:  206:			     (char *__buf, size_t __size, size_t __buflen),
        -:  207:			     __getcwd_chk)
        -:  208:     __wur __warnattr ("getcwd caller with bigger length than size of "
        -:  209:		       "destination buffer");
        -:  210:
        -:  211:__fortify_function __wur char *
        -:  212:__NTH (getcwd (char *__buf, size_t __size))
        -:  213:{
        -:  214:  if (__glibc_objsize (__buf) != (size_t) -1)
        -:  215:    {
        -:  216:      if (!__builtin_constant_p (__size))
        -:  217:	return __getcwd_chk (__buf, __size, __glibc_objsize (__buf));
        -:  218:
        -:  219:      if (__size > __glibc_objsize (__buf))
        -:  220:	return __getcwd_chk_warn (__buf, __size, __glibc_objsize (__buf));
        -:  221:    }
        -:  222:  return __getcwd_alias (__buf, __size);
        -:  223:}
        -:  224:
        -:  225:#if defined __USE_MISC || defined __USE_XOPEN_EXTENDED
        -:  226:extern char *__getwd_chk (char *__buf, size_t buflen)
        -:  227:     __THROW __nonnull ((1)) __wur __attr_access ((__write_only__, 1, 2));
        -:  228:extern char *__REDIRECT_NTH (__getwd_warn, (char *__buf), getwd)
        -:  229:     __nonnull ((1)) __wur __warnattr ("please use getcwd instead, as getwd "
        -:  230:				       "doesn't specify buffer size");
        -:  231:
        -:  232:__fortify_function __nonnull ((1)) __attribute_deprecated__ __wur char *
        -:  233:__NTH (getwd (char *__buf))
        -:  234:{
        -:  235:  if (__glibc_objsize (__buf) != (size_t) -1)
        -:  236:    return __getwd_chk (__buf, __glibc_objsize (__buf));
        -:  237:  return __getwd_warn (__buf);
        -:  238:}
        -:  239:#endif
        -:  240:
        -:  241:extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
        -:  242:			     size_t __buflen) __THROW
        -:  243:  __attr_access ((__write_only__, 2, 3));
        -:  244:extern size_t __REDIRECT_NTH (__confstr_alias, (int __name, char *__buf,
        -:  245:						size_t __len), confstr)
        -:  246:   __attr_access ((__write_only__, 2, 3));
        -:  247:extern size_t __REDIRECT_NTH (__confstr_chk_warn,
        -:  248:			      (int __name, char *__buf, size_t __len,
        -:  249:			       size_t __buflen), __confstr_chk)
        -:  250:     __warnattr ("confstr called with bigger length than size of destination "
        -:  251:		 "buffer");
        -:  252:
        -:  253:__fortify_function size_t
        -:  254:__NTH (confstr (int __name, char *__buf, size_t __len))
        -:  255:{
        -:  256:  if (__glibc_objsize (__buf) != (size_t) -1)
        -:  257:    {
        -:  258:      if (!__builtin_constant_p (__len))
        -:  259:	return __confstr_chk (__name, __buf, __len, __glibc_objsize (__buf));
        -:  260:
        -:  261:      if (__glibc_objsize (__buf) < __len)
        -:  262:	return __confstr_chk_warn (__name, __buf, __len,
        -:  263:				   __glibc_objsize (__buf));
        -:  264:    }
        -:  265:  return __confstr_alias (__name, __buf, __len);
        -:  266:}
        -:  267:
        -:  268:
        -:  269:extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
        -:  270:  __THROW __wur __attr_access ((__write_only__, 2, 1));
        -:  271:extern int __REDIRECT_NTH (__getgroups_alias, (int __size, __gid_t __list[]),
        -:  272:			   getgroups) __wur __attr_access ((__write_only__, 2, 1));
        -:  273:extern int __REDIRECT_NTH (__getgroups_chk_warn,
        -:  274:			   (int __size, __gid_t __list[], size_t __listlen),
        -:  275:			   __getgroups_chk)
        -:  276:     __wur __warnattr ("getgroups called with bigger group count than what "
        -:  277:		       "can fit into destination buffer");
        -:  278:
        -:  279:__fortify_function int
        -:  280:__NTH (getgroups (int __size, __gid_t __list[]))
        -:  281:{
        -:  282:  if (__glibc_objsize (__list) != (size_t) -1)
        -:  283:    {
        -:  284:      if (!__builtin_constant_p (__size) || __size < 0)
        -:  285:	return __getgroups_chk (__size, __list, __glibc_objsize (__list));
        -:  286:
        -:  287:      if (__size * sizeof (__gid_t) > __glibc_objsize (__list))
        -:  288:	return __getgroups_chk_warn (__size, __list, __glibc_objsize (__list));
        -:  289:    }
        -:  290:  return __getgroups_alias (__size, __list);
        -:  291:}
        -:  292:
        -:  293:
        -:  294:extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
        -:  295:			    size_t __nreal) __THROW __nonnull ((2))
        -:  296:   __attr_access ((__write_only__, 2, 3));
        -:  297:extern int __REDIRECT_NTH (__ttyname_r_alias, (int __fd, char *__buf,
        -:  298:					       size_t __buflen), ttyname_r)
        -:  299:     __nonnull ((2));
        -:  300:extern int __REDIRECT_NTH (__ttyname_r_chk_warn,
        -:  301:			   (int __fd, char *__buf, size_t __buflen,
        -:  302:			    size_t __nreal), __ttyname_r_chk)
        -:  303:     __nonnull ((2)) __warnattr ("ttyname_r called with bigger buflen than "
        -:  304:				 "size of destination buffer");
        -:  305:
        -:  306:__fortify_function int
        -:  307:__NTH (ttyname_r (int __fd, char *__buf, size_t __buflen))
        -:  308:{
        -:  309:  if (__glibc_objsize (__buf) != (size_t) -1)
        -:  310:    {
        -:  311:      if (!__builtin_constant_p (__buflen))
        -:  312:	return __ttyname_r_chk (__fd, __buf, __buflen,
        -:  313:				__glibc_objsize (__buf));
        -:  314:
        -:  315:      if (__buflen > __glibc_objsize (__buf))
        -:  316:	return __ttyname_r_chk_warn (__fd, __buf, __buflen,
        -:  317:				     __glibc_objsize (__buf));
        -:  318:    }
        -:  319:  return __ttyname_r_alias (__fd, __buf, __buflen);
        -:  320:}
        -:  321:
        -:  322:
        -:  323:#ifdef __USE_POSIX199506
        -:  324:extern int __getlogin_r_chk (char *__buf, size_t __buflen, size_t __nreal)
        -:  325:     __nonnull ((1)) __attr_access ((__write_only__, 1, 2));
        -:  326:extern int __REDIRECT (__getlogin_r_alias, (char *__buf, size_t __buflen),
        -:  327:		       getlogin_r) __nonnull ((1));
        -:  328:extern int __REDIRECT (__getlogin_r_chk_warn,
        -:  329:		       (char *__buf, size_t __buflen, size_t __nreal),
        -:  330:		       __getlogin_r_chk)
        -:  331:     __nonnull ((1)) __warnattr ("getlogin_r called with bigger buflen than "
        -:  332:				 "size of destination buffer");
        -:  333:
        -:  334:__fortify_function int
        -:  335:getlogin_r (char *__buf, size_t __buflen)
        -:  336:{
        -:  337:  if (__glibc_objsize (__buf) != (size_t) -1)
        -:  338:    {
        -:  339:      if (!__builtin_constant_p (__buflen))
        -:  340:	return __getlogin_r_chk (__buf, __buflen, __glibc_objsize (__buf));
        -:  341:
        -:  342:      if (__buflen > __glibc_objsize (__buf))
        -:  343:	return __getlogin_r_chk_warn (__buf, __buflen,
        -:  344:				      __glibc_objsize (__buf));
        -:  345:    }
        -:  346:  return __getlogin_r_alias (__buf, __buflen);
        -:  347:}
        -:  348:#endif
        -:  349:
        -:  350:
        -:  351:#if defined __USE_MISC || defined __USE_UNIX98
        -:  352:extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
        -:  353:     __THROW __nonnull ((1)) __attr_access ((__write_only__, 1, 2));
        -:  354:extern int __REDIRECT_NTH (__gethostname_alias, (char *__buf, size_t __buflen),
        -:  355:			   gethostname)
        -:  356:  __nonnull ((1)) __attr_access ((__write_only__, 1, 2));
        -:  357:extern int __REDIRECT_NTH (__gethostname_chk_warn,
        -:  358:			   (char *__buf, size_t __buflen, size_t __nreal),
        -:  359:			   __gethostname_chk)
        -:  360:     __nonnull ((1)) __warnattr ("gethostname called with bigger buflen than "
        -:  361:				 "size of destination buffer");
        -:  362:
        -:  363:__fortify_function int
        -:  364:__NTH (gethostname (char *__buf, size_t __buflen))
        -:  365:{
        -:  366:  if (__glibc_objsize (__buf) != (size_t) -1)
        -:  367:    {
        -:  368:      if (!__builtin_constant_p (__buflen))
        -:  369:	return __gethostname_chk (__buf, __buflen, __glibc_objsize (__buf));
        -:  370:
        -:  371:      if (__buflen > __glibc_objsize (__buf))
        -:  372:	return __gethostname_chk_warn (__buf, __buflen,
        -:  373:				       __glibc_objsize (__buf));
        -:  374:    }
        -:  375:  return __gethostname_alias (__buf, __buflen);
        -:  376:}
        -:  377:#endif
        -:  378:
        -:  379:
        -:  380:#if defined __USE_MISC || (defined __USE_XOPEN && !defined __USE_UNIX98)
        -:  381:extern int __getdomainname_chk (char *__buf, size_t __buflen, size_t __nreal)
        -:  382:     __THROW __nonnull ((1)) __wur __attr_access ((__write_only__, 1, 2));
        -:  383:extern int __REDIRECT_NTH (__getdomainname_alias, (char *__buf,
        -:  384:						   size_t __buflen),
        -:  385:			   getdomainname) __nonnull ((1))
        -:  386:  __wur __attr_access ((__write_only__, 1, 2));
        -:  387:extern int __REDIRECT_NTH (__getdomainname_chk_warn,
        -:  388:			   (char *__buf, size_t __buflen, size_t __nreal),
        -:  389:			   __getdomainname_chk)
        -:  390:     __nonnull ((1)) __wur __warnattr ("getdomainname called with bigger "
        -:  391:				       "buflen than size of destination "
        -:  392:				       "buffer");
        -:  393:
        -:  394:__fortify_function int
        -:  395:__NTH (getdomainname (char *__buf, size_t __buflen))
        -:  396:{
        -:  397:  if (__glibc_objsize (__buf) != (size_t) -1)
        -:  398:    {
        -:  399:      if (!__builtin_constant_p (__buflen))
        -:  400:	return __getdomainname_chk (__buf, __buflen, __glibc_objsize (__buf));
        -:  401:
        -:  402:      if (__buflen > __glibc_objsize (__buf))
        -:  403:	return __getdomainname_chk_warn (__buf, __buflen,
        -:  404:					 __glibc_objsize (__buf));
        -:  405:    }
        -:  406:  return __getdomainname_alias (__buf, __buflen);
        -:  407:}
        -:  408:#endif
